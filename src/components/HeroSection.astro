---
import KeepScrolling from '../assets/keep-scrolling.svg'
---

<section id="hero-section" class="relative w-[100vw] h-[100vh] flex justify-end items-center flex-col flex-nowrap z-3 overflow-hidden">
    <img src="olas.webp" alt="" class="w-[100%] h-[100%] object-cover">
    <div id="slogan" class="absolute pb-[10em] w-[100%] cursor-default z-11">
        <div>
            <div class="relative flex justify-center items-center overflow-hidden">
                <h1 class="text-white uppercase text-[6.25em] font-extrabold leading-none tracking-[-0.04em] mt-0 mb-0">Unlock</h1>
            </div>
            <div class="relative flex justify-center items-center overflow-hidden">
                <h1 class="text-white text-[5.56em] font-editorial font-extralight leading-[1.1] tracking-[-0.04em] h1-serif">Your Brand's Personality</h1>
            </div>
        </div>
        <div id="scroller" class="h-60 flex justify-center items-center">
            <KeepScrolling class="text-white drop-shadow-2xl w-20 h-20 animate-bounce-pulse" />
        </div>
    </div>
    <div class="absolute flex justify-start items-center flex-col flex-nowrap z-11 w-[100%] px-[30px] inset-y-auto inset-x-0">
        <div id="line" class="w-[100%] h-[1px] bg-white origin-center transform scale-x-0" />
        <div class="w-[100%] flex justify-center md:justify-between items-center py-[2em]">
            <div class="relative hidden md:flex overflow-hidden w-[25%] items-center justify-start">
                <div class="text-white uppercase text-[1.04em] font-bold testy">Animations</div>
            </div>
            <div class="pb-[10vh] md:max-w-[40%] md:pb-0">
                <div class="relative overflow-hidden flex justify-center items-center max-w-[100%] text-white text-[1.04em] text-center font-bold leading-[1.2] description">I design and develop websites that do more than look goodâ€”they tell stories, evoke emotions, and make brands feel alive.</div>
            </div>
            <div class="relative hidden md:flex overflow-hidden w-[25%] items-center justify-end">
                <div class="text-white uppercase font-bold testy text-[1.04em]">Web developer</div>
            </div>
        </div>
    </div>
</section>

<script>
    import * as THREE from 'three';
    if(window.innerWidth >= 768) {

        const scene = new THREE.Scene();
        const camera = new THREE.OrthographicCamera(-1,1,1,-1,0,1);
        const renderer = new THREE.WebGLRenderer({antialias:true});
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.getElementById('hero-section')!.appendChild(renderer.domElement);
        
        const loader = new THREE.TextureLoader();
        const texture1 = loader.load('');
        const texture2 = loader.load('olas.webp');
        
        const uniforms = {
            u_time: { value: 0 },
            u_mouse: { value: new THREE.Vector2(0.5,0.5) },
            u_resolution: { value: new THREE.Vector2(window.innerWidth, window.innerHeight) },
            u_texture1: { value: texture1 },
            u_texture2: { value: texture2 }
        };
        
        const material = new THREE.ShaderMaterial({
            uniforms,
            vertexShader: `
            varying vec2 vUv;
            void main() {
                vUv = uv;
                gl_Position = vec4(position,1.0);
                }
                `,
                fragmentShader: `
                precision highp float;
                
                uniform float u_time;
                uniform vec2 u_mouse;
                uniform vec2 u_resolution;
                uniform sampler2D u_texture1;
                uniform sampler2D u_texture2;
                
                float organicNoise(float angle, float time) {
                    return sin(angle * 6.0 + time * 9.0) * 0.02 +
                    cos(angle * 9.0 - time * 9.0) * 0.02;
                    }
                    
                    void main() {
                        vec2 uv = gl_FragCoord.xy / u_resolution;
                        vec2 diff = uv - u_mouse;
                        
                        vec2 scale = vec2(2.5, 1.35);
                        vec2 scaledDiff = diff * scale;
                        
                        float dist = length(scaledDiff);
                        float angle = atan(diff.y, diff.x);
                        
                        float baseRadius = 0.23;
                        float noise = organicNoise(angle, u_time);
                        float radiusDeformed = baseRadius + noise;
                        
                        float mask = dist < radiusDeformed ? 1.0 : 0.0;
                        
                        vec4 frontColor = texture2D(u_texture1, uv);
                        vec4 backColor = texture2D(u_texture2, uv);
                        
                        // Oscurecer lo que se ve dentro del agujero
                        float darkOpacity = 0.5;
                        vec4 darkOverlay = vec4(0.0, 0.0, 0.0, 1.0);
                        vec4 backDarkened = mix(backColor, darkOverlay, darkOpacity);
                        
                        vec4 finalColor = mix(frontColor, backDarkened, mask);
                        
                        gl_FragColor = finalColor;
                        }
                        `
                    });

                    const plane = new THREE.Mesh(new THREE.PlaneGeometry(2,2), material);
                    scene.add(plane);
                    
                    const mousePos = new THREE.Vector2(0.5, 0.5);
                    const smoothPos = new THREE.Vector2(0.5, 0.5);
                    
                    window.addEventListener('mousemove', e => {
                        mousePos.x = e.clientX / window.innerWidth;
                        mousePos.y = 1.0 - e.clientY / window.innerHeight;
                    });
                    
                    window.addEventListener('resize', () => {
                        renderer.setSize(window.innerWidth, window.innerHeight);
                        uniforms.u_resolution.value.set(window.innerWidth, window.innerHeight);
                    });
                    
                    const clock = new THREE.Clock();
                    
                    function animate() {
                        requestAnimationFrame(animate);
                        uniforms.u_time.value = clock.getElapsedTime();
                        
                        // Suavizado con retardo
                        smoothPos.x += (mousePos.x - smoothPos.x) * 0.08;
                        smoothPos.y += (mousePos.y - smoothPos.y) * 0.08;
                        
                        const offsetMax = 0.07;
                        
                        // Offset proporcional a la distancia desde el centro, sin saltos
                        const offsetX = offsetMax * (smoothPos.x - 0.5) * 2.0; // va de -offsetMax a offsetMax
                        const offsetY = offsetMax * 8.0 * (smoothPos.y - 0.5) * 2.0;
                        
                        const displacedPos = new THREE.Vector2(smoothPos.x + offsetX, smoothPos.y + offsetY);
                        
                        uniforms.u_mouse.value.copy(displacedPos);
                        
                        renderer.render(scene, camera);
                    }
                    
                    animate();
                    
                }
                </script>
                